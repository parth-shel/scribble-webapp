{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js-dos-ts/js-dos-build.ts","js-dos-ts/js-dos-cache-db.ts","js-dos-ts/js-dos-cache-noop.ts","js-dos-ts/js-dos-cache.ts","js-dos-ts/js-dos-ci.ts","js-dos-ts/js-dos-conf.ts","js-dos-ts/js-dos-dom.ts","js-dos-ts/js-dos-fs.ts","js-dos-ts/js-dos-host.ts","js-dos-ts/js-dos-module.ts","js-dos-ts/js-dos-options.ts","js-dos-ts/js-dos-ui.ts","js-dos-ts/js-dos-xhr.ts","js-dos-ts/js-dos.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Build","version","jsVersion","jsSize","wasmVersion","wasmSize","CacheDb","onready","onerror","_this","this","storeName","db","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","openRequest","open","event","onsuccess","result","onupgradeneeded","createObjectStore","prototype","put","key","data","onflush","transaction","oncomplete","objectStore","get","ondata","request","forEach","each","onend","openCursor","cursor","target","toString","value","continue","CacheNoop","js_dos_cache_db_1","__importDefault","js_dos_cache_noop_1","default","msg","undefined","log","DosCommandInterface","dos","shellInputQueue","shellInputClients","em","api","ping","args","_i","arguments","onping","width","canvas","height","shell","cmd","Promise","resolve","reject","push","cmd_1","next","requestShellInput","screenshot","send","exit","terminate","error","simulateKeyEvent","keyCode","pressed","name","document","createEvent","getter","keyCodeVal","Object","defineProperty","initKeyboardEvent","defaultView","initKeyEvent","dispatchEvent","simulateKeyPress","setTimeout","sendKeyPress","onframe","buffer","maxLength","shift","cmdLength","lengthBytesUTF8","stringToUTF8","_a","tick","js_dos_options_1","config","conf","jsdosconf","keys","DosBoxConfigDefaults","placeholder","replace","applyCss","id","css","getElementById","style","createElement","innerHTML","head","appendChild","createDiv","className","el","js_dos_xhr_1","DosFS","syncingPromise","lastSyncTime","fs","FS","registerTickListener","Date","now","syncFs","registerPauseListener","registerTerminateListener","chdir","path","extract","url","persistentMount","type","parts","normalizePath","split","createPath","extractArchiveInCwd","Xhr","cache","responseType","fail","progress","total","loaded","onprogress","success","bytes","Uint8Array","_malloc","HEAPU8","set","retcode","_extract_zip","_free","writeOk","then","catch","mount","filesystems","IDBFS","syncfs","err","readOk","warn","createFile","file","body","ArrayBuffer","RegExp","filename","trim","createDataFile","begin","end","part","endsWith","substr","readed","readFile","js_dos_build_1","DosHost","wasmSupported","global","wdosboxPromise","WebAssembly","_typeof","instantiate","compile","wmodule","Module","of","Instance","polyfill","Math","imul","b","al","bl","fround","x","clz32","trunc","ceil","floor","resolveDosBox","WDOSBOX","ondosbox","instantiateWasm","compileDosBox","instance","message","buildTotal","wasmUrl","status","response","promise","onreject","reason","wasmModule","info","receiveInstance","env","globalscall","onglobals","apply","eval","Host","js_dos_ci_1","js_dos_conf_1","js_dos_fs_1","js_dos_ui_1","DosModule","_super","isValid","ci","ui","tickListeners","pauseListeners","resumeListeners","terminateListeners","registerDefaultListeners","__extends","hidden","mozHidden","msHidden","webkitHidden","addEventListener","pause","resume","debug","dosbox","wdosboxUrl","console","DosUi","stage","SDL","defaults","widht","copyOnLock","discardOnLock","opaqueFrontBuffer","onRuntimeInitialized","main","detach","unshift","callMain","listener","registerResumeListener","l","DosOptions","DosBoxConfig","cycles","DosDom","__importStar","overlay","loaderMessage","overlayHtml","parentElement","container_1","replaceChild","container","childById","show","onprogressFallback","round","hide","setAttribute","parent","childElementCount","child","children","options","xhr","resource","method","makeHttpRequest","progressListner","errorListener","XMLHttpRequest","setRequestHeader","overrideMimeType","evt","onreadystatechange","onReadyStateChange","readyState","max","indexOf","js_dos_cache_1","js_dos_host_1","js_dos_module_1","Dos","dosReadyPromise","assign","ready","runtime"],"mappings":"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","file":"js-dos.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Autogenerated\n// -------------\n// gulpfile.js --> generateBuildInfo\n\nexport const Build = {\n    version: \"6.22.33 (f4423f98f23ae8f2bd689442f95fc29e)\",\n    jsVersion: \"59875851282d50e241d418337cfa413f093cf347\",\n    jsSize:  196977,\n    wasmVersion: \"03ff8f9208bc11b041bebc7cce39e56d\",\n    wasmSize: 1810179,\n};\n","import { ICache } from \"./js-dos-cache\";\n\nexport default class CacheDb implements ICache {\n\n    public version: string;\n    private storeName: string = \"files\";\n    private indexedDB: IDBFactory;\n    private db: IDBDatabase | null = null;\n\n    constructor(version: string, onready: (cache: ICache) => void, onerror: (msg: string) => void) {\n        this.version = version;\n        this.indexedDB = window.indexedDB || (window as any).mozIndexedDB\n            || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\n\n        if (!this.indexedDB) {\n            onerror(\"Indexed db is not supported on this host\");\n            return;\n        }\n\n        const openRequest = this.indexedDB.open(\"js-dos-cache (\" + version + \")\", 1);\n        openRequest.onerror = (event) => {\n            onerror(\"Can't open cache database\");\n        };\n        openRequest.onsuccess = (event) => {\n            this.db = openRequest.result;\n            onready(this);\n        };\n        openRequest.onupgradeneeded = (event) => {\n            try {\n                this.db = openRequest.result;\n                this.db.onerror = (event) => {\n                    onerror(\"Can't upgrade cache database\");\n                };\n\n                this.db.createObjectStore(this.storeName);\n            } catch (e) {\n                onerror(\"Can't upgrade cache database\");\n            }\n        };\n    }\n\n    public put(key: string, data: any, onflush: () => void) {\n        if (this.db === null) {\n            onflush();\n            return;\n        }\n\n        const transaction = this.db.transaction(this.storeName, \"readwrite\");\n        transaction.oncomplete = () => onflush();\n        transaction.objectStore(this.storeName).put(data, key);\n    }\n\n    public get(key: string, ondata: (data: any) => void, onerror: (msg: string) => void) {\n        if (this.db === null) {\n            onerror(\"db is not initalized\");\n            return;\n        }\n\n        const transaction = this.db.transaction(this.storeName, \"readonly\");\n        const request = transaction.objectStore(this.storeName).get(key);\n        request.onerror = () => onerror(\"Can't read value for key '\" + key + \"'\");\n        request.onsuccess = () => {\n            if (request.result) {\n                ondata(request.result);\n            } else {\n                onerror(\"Result is empty for key '\" + key + \"', result: \" + request.result);\n            }\n        };\n    }\n\n    public forEach(each: (key: string, value: any) => void, onend: () => void) {\n        if (this.db === null) {\n            onend();\n            return;\n        }\n\n        const transaction = this.db.transaction(this.storeName, \"readonly\");\n        const request = transaction.objectStore(this.storeName).openCursor();\n        request.onerror = () => onend();\n        request.onsuccess = (event) => {\n            const cursor = (event.target as any).result as IDBCursorWithValue;\n            if (cursor) {\n                each(cursor.key.toString(), cursor.value);\n                cursor.continue();\n            } else {\n                onend();\n            }\n        };\n    }\n}\n","import { ICache } from \"./js-dos-cache\";\n\nexport default class CacheNoop implements ICache {\n    public put(key: string, data: any, onflush: () => void) {\n        // nothing\n    }\n\n    public get(key: string, ondata: (data: any) => void, onerror: (msg: string) => void) {\n        onerror(\"Cache is not supported on this host\");\n    }\n\n    public forEach(each: (key: string, value: any) => void, onend: () => void) {\n        onend();\n    }\n}\n","import CacheDb from \"./js-dos-cache-db\";\nimport CacheNoop from \"./js-dos-cache-noop\";\nimport { DosModule } from \"./js-dos-module\";\n\nexport interface ICache {\n    put: (key: string, data: any, onflush: () => void) => void;\n    get: (key: string, ondata: (data: any) => void, onerror: (msg: string) => void) => void;\n    forEach: (each: (key: string, value: any) => void, onend: () => void) => void;\n}\n\nexport default function openCache(module: DosModule, onready: (cache: ICache) => void) {\n    new CacheDb(module.version, onready, (msg: string) => {\n        if (module.log !== undefined) {\n            module.log(\"ERR! Can't initalize cache, cause: \" + msg);\n        }\n        onready(new CacheNoop());\n    });\n}\n","// # DosCommandInterface\n// Is abstraction that allows you to control runned instance of js-dos\nimport { DosModule } from \"./js-dos-module\";\n\nexport class DosCommandInterface {\n    public dos: DosModule;\n    private em: any; // typeof Module;\n    private api: LowLevelApi;\n    private onready: (ci: DosCommandInterface) => void;\n\n    private shellInputQueue: string[] = [];\n    private shellInputClients: Array<() => void> = [];\n\n    constructor(dos: DosModule, onready: (ci: DosCommandInterface) => void) {\n        this.dos = dos;\n        this.em = (dos as any);\n        this.api = (dos as any);\n        this.api.ping = (msg: string, ...args: any[]) => {\n            this.onping(msg, args);\n        };\n        this.onready = onready;\n    }\n\n    // * `width()` - return dosbox window width in pixels\n    public width() {\n        return this.dos.canvas.width;\n    }\n\n    // * `height()` - return dosbox window height in pixels\n    public height() {\n        return this.dos.canvas.height;\n    }\n\n    // * `shell([cmd1, cmd2, ...])` - executes passed commands\n    // in dosbox shell if it's runned, returns Promise that\n    // resolves when commands sequence is executed\n    public shell(...cmd: string[]) {\n        if (cmd.length === 0) {\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.shellInputClients.push(resolve);\n            for (const next of cmd) {\n                this.shellInputQueue.push(next);\n            }\n            this.requestShellInput();\n        });\n    }\n\n    // * `screenshot()` - get screnshot of canvas as ImageData\n    public screenshot() {\n        return new Promise((resolve) => {\n            this.api.send(\"screenshot\", \"\", (data) => {\n                resolve(data);\n            });\n        });\n    }\n\n    // * `exit()` - immediately exit from runtime\n    public exit() {\n        try {\n            this.dos.terminate();\n            this.api.send(\"exit\");\n        } catch (e) {\n            return 0;\n        }\n\n        this.dos.error(\"Runtime is still alive!\");\n        return -1;\n    }\n\n    // * `simulateKeyEvent(keyCode, pressed)` - allows to simulate key press OR release on js-dos canvas\n    public simulateKeyEvent(keyCode: number, pressed: boolean): void {\n        const name = pressed ? \"keydown\" : \"keyup\";\n        const event = document.createEvent(\"KeyboardEvent\") as any;\n        const getter: any = {\n            get() {\n                return this.keyCodeVal;\n            },\n        };\n\n        // Chromium Hack\n        Object.defineProperty(event, \"keyCode\", getter);\n        Object.defineProperty(event, \"which\", getter);\n        Object.defineProperty(event, \"charCode\", getter);\n\n        event.initKeyboardEvent\n        ? event.initKeyboardEvent(name, true, true, document.defaultView, false, false, false, false, keyCode, keyCode)\n        : event.initKeyEvent(name, true, true, document.defaultView, false, false, false, false, keyCode, 0);\n\n        event.keyCodeVal = keyCode;\n        this.dos.canvas && this.dos.canvas.dispatchEvent(event);\n    }\n\n    // * `simulateKeyPress(keyCode)` - allows to simulate key press AND release on js-dos canvas\n    public simulateKeyPress(keyCode: number): void {\n        this.simulateKeyEvent(keyCode, true);\n        setTimeout(() => this.simulateKeyEvent(keyCode, false), 100);\n    }\n\n    private sendKeyPress(code: number) {\n        this.api.send(\"sdl_key_event\", code + \"\");\n    }\n\n    private requestShellInput() {\n        this.sendKeyPress(13);\n    }\n\n    private onping(msg: string, args: any[]) {\n        switch (msg) {\n            case \"ready\":\n                this.onready(this);\n                break;\n            case \"frame\":\n                this.onframe();\n                break;\n            case \"shell_input\":\n                if (this.shellInputQueue.length === 0) {\n                    return;\n                }\n\n                const buffer: number = args[0];\n                const maxLength: number = args[1];\n\n                const cmd = this.shellInputQueue.shift();\n                const cmdLength = this.em.lengthBytesUTF8(cmd) + 1;\n\n                if (cmdLength > maxLength) {\n                    if (this.dos.onerror !== undefined) {\n                        this.dos.onerror(\"Can't execute cmd '\" + cmd +\n                            \"', because it's bigger then max cmd length \" + maxLength);\n                    }\n                    return;\n                }\n\n                this.em.stringToUTF8(cmd, buffer, cmdLength);\n\n                if (this.shellInputQueue.length === 0) {\n                    for (const resolve of this.shellInputClients) {\n                        resolve();\n                    }\n                    this.shellInputClients = [];\n                } else {\n                    this.requestShellInput();\n                }\n            default:\n            /* do nothing */\n        }\n    }\n\n    private onframe() {\n        this.dos.tick();\n    }\n}\n\ninterface LowLevelApi {\n    send: (event: string, msg?: any, callback?: (msg: string) => void) => void;\n    ping: (msg: string) => void;\n}\n","import { DosBoxConfig, DosBoxConfigDefaults } from \"./js-dos-options\";\n\n// # js-dos default config\n// This is default config for dosbox that applies for all runs.\n\n// It's configurable through [options](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options)\nexport default function getJsDosConfig(config: DosBoxConfig): string {\n    let conf = jsdosconf;\n    function update(placeholder: string) {\n        conf = conf.replace(\"%\" + placeholder + \"%\",\n            ((config as any)[placeholder] || (DosBoxConfigDefaults as any)[placeholder]) + \"\");\n    }\n    Object.keys(DosBoxConfigDefaults).forEach((name) => update(name));\n    return conf;\n}\n\n/* tslint:disable:max-line-length */\nconst jsdosconf = `\n# This is the configurationfile for DOSBox 0.74. (Please use the latest version of DOSBox)\n# Lines starting with a # are commentlines and are ignored by DOSBox.\n# They are used to (briefly) document the effect of each option.\n\n[sdl]\n#       fullscreen: Start dosbox directly in fullscreen. (Press ALT-Enter to go back)\n#       fulldouble: Use double buffering in fullscreen. It can reduce screen flickering, but it can also result in a slow DOSBox.\n#   fullresolution: What resolution to use for fullscreen: original or fixed size (e.g. 1024x768).\n#                     Using your monitor's native resolution with aspect=true might give the best results.\n#                     If you end up with small window on a large screen, try an output different from surface.\n# windowresolution: Scale the window to this size IF the output device supports hardware scaling.\n#                     (output=surface does not!)\n#           output: What video system to use for output.\n#                   Possible values: surface, overlay, opengl, openglnb.\n#         autolock: Mouse will automatically lock, if you click on the screen. (Press CTRL-F10 to unlock)\n#      sensitivity: Mouse sensitivity.\n#      waitonerror: Wait before closing the console if dosbox has an error.\n#         priority: Priority levels for dosbox. Second entry behind the comma is for when dosbox is not focused/minimized.\n#                     pause is only valid for the second entry.\n#                   Possible values: lowest, lower, normal, higher, highest, pause.\n#       mapperfile: File used to load/save the key/event mappings from. Resetmapper only works with the defaul value.\n#     usescancodes: Avoid usage of symkeys, might not work on all operating systems.\n\nfullscreen=false\nfulldouble=false\nfullresolution=original\nwindowresolution=original\noutput=surface\nautolock=false\nsensitivity=100\nwaitonerror=true\npriority=higher,normal\nmapperfile=mapper-jsdos.map\nusescancodes=true\nvsync=false\n\n[dosbox]\n# language: Select another language file.\n#  machine: The type of machine tries to emulate.\n#           Possible values: hercules, cga, tandy, pcjr, ega, vgaonly, svga_s3, svga_et3000, svga_et4000, svga_paradise, vesa_nolfb, vesa_oldvbe.\n# captures: Directory where things like wave, midi, screenshot get captured.\n#  memsize: Amount of memory DOSBox has in megabytes.\n#             This value is best left at its default to avoid problems with some games,\n#             though few games might require a higher value.\n#             There is generally no speed advantage when raising this value.\n\nlanguage=\nmachine=svga_s3\ncaptures=capture\nmemsize=16\n\n[render]\n# frameskip: How many frames DOSBox skips before drawing one.\n#    aspect: Do aspect correction, if your output method doesn't support scaling this can slow things down!.\n#    scaler: Scaler used to enlarge/enhance low resolution modes.\n#              If 'forced' is appended, then the scaler will be used even if the result might not be desired.\n#            Possible values: none, normal2x, normal3x, advmame2x, advmame3x, advinterp2x, advinterp3x, hq2x, hq3x, 2xsai, super2xsai, supereagle, tv2x, tv3x, rgb2x, rgb3x, scan2x, scan3x.\n\nframeskip=0\naspect=false\nscaler=none\n\n[cpu]\n#      core: CPU Core used in emulation. auto will switch to dynamic if available and appropriate.\n#            Possible values: auto, dynamic, normal, simple.\n#   cputype: CPU Type used in emulation. auto is the fastest choice.\n#            Possible values: auto, 386, 386_slow, 486_slow, pentium_slow, 386_prefetch.\n#    cycles: Amount of instructions DOSBox tries to emulate each millisecond.\n#            Setting this value too high results in sound dropouts and lags.\n#            Cycles can be set in 3 ways:\n#              'auto'          tries to guess what a game needs.\n#                              It usually works, but can fail for certain games.\n#              'fixed #number' will set a fixed amount of cycles. This is what you usually need if 'auto' fails.\n#                              (Example: fixed 4000).\n#              'max'           will allocate as much cycles as your computer is able to handle.\n#\n#            Possible values: auto, fixed, max.\n#   cycleup: Amount of cycles to decrease/increase with keycombo.(CTRL-F11/CTRL-F12)\n# cycledown: Setting it lower than 100 will be a percentage.\n\ncore=auto\ncputype=auto\ncycles=%cycles%\ncycleup=10\ncycledown=20\n\n[mixer]\n#   nosound: Enable silent mode, sound is still emulated though.\n#      rate: Mixer sample rate, setting any device's rate higher than this will probably lower their sound quality.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n# blocksize: Mixer block size, larger blocks might help sound stuttering but sound will also be more lagged.\n#            Possible values: 1024, 2048, 4096, 8192, 512, 256.\n# prebuffer: How many milliseconds of data to keep on top of the blocksize.\n\nnosound=false\nrate=44100\nblocksize=1024\nprebuffer=20\n\n[midi]\n#     mpu401: Type of MPU-401 to emulate.\n#             Possible values: intelligent, uart, none.\n# mididevice: Device that will receive the MIDI data from MPU-401.\n#             Possible values: default, win32, alsa, oss, coreaudio, coremidi, none.\n# midiconfig: Special configuration options for the device driver. This is usually the id of the device you want to use.\n#               See the README/Manual for more details.\n\nmpu401=intelligent\nmididevice=default\nmidiconfig=\n\n[sblaster]\n#  sbtype: Type of Soundblaster to emulate. gb is Gameblaster.\n#          Possible values: sb1, sb2, sbpro1, sbpro2, sb16, gb, none.\n#  sbbase: The IO address of the soundblaster.\n#          Possible values: 220, 240, 260, 280, 2a0, 2c0, 2e0, 300.\n#     irq: The IRQ number of the soundblaster.\n#          Possible values: 7, 5, 3, 9, 10, 11, 12.\n#     dma: The DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n#    hdma: The High DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n# sbmixer: Allow the soundblaster mixer to modify the DOSBox mixer.\n# oplmode: Type of OPL emulation. On 'auto' the mode is determined by sblaster type. All OPL modes are Adlib-compatible, except for 'cms'.\n#          Possible values: auto, cms, opl2, dualopl2, opl3, none.\n#  oplemu: Provider for the OPL emulation. compat might provide better quality (see oplrate as well).\n#          Possible values: default, compat, fast.\n# oplrate: Sample rate of OPL music emulation. Use 49716 for highest quality (set the mixer rate accordingly).\n#          Possible values: 44100, 49716, 48000, 32000, 22050, 16000, 11025, 8000.\n\nsbtype=sb16\nsbbase=220\nirq=7\ndma=1\nhdma=5\nsbmixer=true\noplmode=auto\noplemu=default\noplrate=44100\n\n[gus]\n#      gus: Enable the Gravis Ultrasound emulation.\n#  gusrate: Sample rate of Ultrasound emulation.\n#           Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#  gusbase: The IO base address of the Gravis Ultrasound.\n#           Possible values: 240, 220, 260, 280, 2a0, 2c0, 2e0, 300.\n#   gusirq: The IRQ number of the Gravis Ultrasound.\n#           Possible values: 5, 3, 7, 9, 10, 11, 12.\n#   gusdma: The DMA channel of the Gravis Ultrasound.\n#           Possible values: 3, 0, 1, 5, 6, 7.\n# ultradir: Path to Ultrasound directory. In this directory\n#           there should be a MIDI directory that contains\n#           the patch files for GUS playback. Patch sets used\n#           with Timidity should work fine.\n\ngus=false\ngusrate=44100\ngusbase=240\ngusirq=5\ngusdma=3\nultradir=C:\\ULTRASND\n\n[speaker]\n# pcspeaker: Enable PC-Speaker emulation.\n#    pcrate: Sample rate of the PC-Speaker sound generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#     tandy: Enable Tandy Sound System emulation. For 'auto', emulation is present only if machine is set to 'tandy'.\n#            Possible values: auto, on, off.\n# tandyrate: Sample rate of the Tandy 3-Voice generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#    disney: Enable Disney Sound Source emulation. (Covox Voice Master and Speech Thing compatible).\n\npcspeaker=true\npcrate=44100\ntandy=auto\ntandyrate=44100\ndisney=true\n\n[joystick]\n# joysticktype: Type of joystick to emulate: auto (default), none,\n#               2axis (supports two joysticks),\n#               4axis (supports one joystick, first joystick used),\n#               4axis_2 (supports one joystick, second joystick used),\n#               fcs (Thrustmaster), ch (CH Flightstick).\n#               none disables joystick emulation.\n#               auto chooses emulation depending on real joystick(s).\n#               (Remember to reset dosbox's mapperfile if you saved it earlier)\n#               Possible values: auto, 2axis, 4axis, 4axis_2, fcs, ch, none.\n#        timed: enable timed intervals for axis. Experiment with this option, if your joystick drifts (away).\n#     autofire: continuously fires as long as you keep the button pressed.\n#       swap34: swap the 3rd and the 4th axis. can be useful for certain joysticks.\n#   buttonwrap: enable button wrapping at the number of emulated buttons.\n\njoysticktype=auto\ntimed=true\nautofire=false\nswap34=false\nbuttonwrap=false\n\n[serial]\n# serial1: set type of device connected to com port.\n#          Can be disabled, dummy, modem, nullmodem, directserial.\n#          Additional parameters must be in the same line in the form of\n#          parameter:value. Parameter for all types is irq (optional).\n#          for directserial: realport (required), rxdelay (optional).\n#                           (realport:COM1 realport:ttyS0).\n#          for modem: listenport (optional).\n#          for nullmodem: server, rxdelay, txdelay, telnet, usedtr,\n#                         transparent, port, inhsocket (all optional).\n#          Example: serial1=modem listenport:5000\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial2: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial3: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial4: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n\nserial1=dummy\nserial2=dummy\nserial3=disabled\nserial4=disabled\n\n[dos]\n#            xms: Enable XMS support.\n#            ems: Enable EMS support.\n#            umb: Enable UMB support.\n# keyboardlayout: Language code of the keyboard layout (or none).\n\nxms=true\nems=true\numb=true\nkeyboardlayout=auto\n\n[ipx]\n# ipx: Enable ipx over UDP/IP emulation.\n\nipx=false\n\n[autoexec]\n# Lines in this section will be run at startup.\n# You can put your MOUNT lines here.\n\n# https://js-dos.com\n# █▀▀▀▀▀█ █  ▄▄▄▀▀█ █▀▀▀▀▀█\n# █ ███ █ ██▄ █ ▀ ▄ █ ███ █\n# █ ▀▀▀ █ ▄██ ▀ ▀▀█ █ ▀▀▀ █\n# ▀▀▀▀▀▀▀ ▀ █▄▀▄▀ █ ▀▀▀▀▀▀▀\n# █▀▄▄█▀▀▄▄ ▀ ▀█▄▄▄▄ ▀▄█▀█▀\n# █▀ ▀ ▀▀▄ █▀ ▄ ▄▀▀▀▄ █▀█▄\n# ▄ ▄▄ █▀▀▄ ▄▀▄▀▀█  ▀▀▄▀▀█▀\n#   ▄▀▀█▀▀ █▀█▀█▀▀▄ ▀██▀█▄\n# ▀▀▀ ▀ ▀ █▄█ ▀█▄▄█▀▀▀█▀▀\n# █▀▀▀▀▀█ ▄▄▄ ▄ ▄ █ ▀ █▄▄▄▄\n# █ ███ █ ▀█▀▀▄▀▀▄████▀▀█▄█\n# █ ▀▀▀ █ ▄▀▀█▀█▀▄ ▀▀▄▄█▄█ \n# ▀▀▀▀▀▀▀ ▀   ▀▀ ▀  ▀   ▀▀▀\n`;\n","// # DosDom\n// Simple API to work with DOM\n\n// ### applyCss - add new css style if no html element with id exists\nexport function applyCss(id: string, css: string) {\n    if (document.getElementById(id) === null) {\n        const style = document.createElement(\"style\") as HTMLStyleElement;\n        style.id = id;\n        style.innerHTML = css;\n        document.head.appendChild(style);\n    }\n}\n\n// ### createDiv - typesafe shortcut for creating HTMLDivElement\nexport function createDiv(className?: string): HTMLDivElement {\n    const el = document.createElement(\"div\") as HTMLDivElement;\n    if (className !== undefined) {\n        el.className = className;\n    }\n    return el;\n}\n","// # DosFS\n// API for working with file system of dosbox\n\nimport CacheNoop from \"./js-dos-cache-noop\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nexport class DosFS {\n    private dos: DosModule;\n    private em: any; // typeof Module;\n    private fs: any;\n    private syncingPromise: Promise<void> | null = null;\n    private lastSyncTime = 0;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.em = dos as any;\n        this.fs = (dos as any).FS;\n\n        // Sync fs to indexed db periodically\n        this.dos.registerTickListener(() => {\n            if (Date.now() - this.lastSyncTime < 5000) {\n                return;\n            }\n            this.lastSyncTime = Date.now();\n            this.syncFs();\n        });\n        this.dos.registerPauseListener(() => this.syncFs());\n        this.dos.registerTerminateListener(() => this.syncFs());\n    }\n\n    public chdir(path: string) {\n        this.fs.chdir(path);\n    }\n\n    // ### extract\n    public extract(url: string, persistentMount: string = \"/\", type: string = \"zip\") {\n        // download archive by given url and then extract it in cwd (cwd will be mounted as C:)\n        //\n        // * `url` - url for downloading archive\n        // * `persistentMount` - is a path to mount archive contents, by default mount point is '/' which\n        // is a MEMFS that is live only in one ssesion. It means that after restart all progress will be erased.\n        // If you set some path (any), then this path will be stored across sessions in indexed db. It means\n        // that progress will be there after browser restart.\n        // * `type` - archive type **only zip is supported**\n        //\n        // this method will return `Promise<void>`, that will be resolved\n        // on success with empty object or rejected\n\n        persistentMount = this.normalizePath(persistentMount);\n\n        const parts = persistentMount.split(\"/\");\n        this.createPath(parts, 0, parts.length);\n        this.chdir(persistentMount);\n\n        const extractArchiveInCwd = () => {\n            return new Promise<void>((resolve, reject) => {\n                if (type !== \"zip\") {\n                    reject(\"Only ZIP archive is supported\");\n                    return;\n                }\n\n                new Xhr(url, {\n                    cache: new CacheNoop(),\n                    responseType: \"arraybuffer\",\n                    fail: (msg) => reject(msg),\n                    progress: (total, loaded) => {\n                        if (this.dos.onprogress !== undefined) {\n                            this.dos.onprogress(\"Downloading \" + url, total, loaded);\n                        }\n                    },\n                    success: (data: ArrayBuffer) => {\n                        const bytes = new Uint8Array(data);\n                        const buffer = this.em._malloc(bytes.length);\n                        this.em.HEAPU8.set(bytes, buffer);\n                        const retcode = this.em._extract_zip(buffer, bytes.length);\n                        this.em._free(buffer);\n\n                        if (retcode === 0) {\n                            this.writeOk(persistentMount);\n                            this.syncFs().then(resolve).catch(reject);\n                        } else {\n                            reject(\"Can't extract zip, retcode \" + retcode + \", see more info in logs\");\n                        }\n                    },\n                });\n            });\n        };\n\n        if (persistentMount === \"/\" || persistentMount.length === 0) {\n            return extractArchiveInCwd();\n        }\n\n        return new Promise<void>((resolve, reject) => {\n            if (this.lastSyncTime > 0) {\n                reject(\"Can't create persistent mount point, after syncing process starts\");\n                return;\n            }\n\n            this.fs.mount(this.fs.filesystems.IDBFS, {}, persistentMount);\n            this.fs.syncfs(true, (err: any) => {\n                if (err) {\n                    reject(\"Can't restore FS from indexed db, cause: \" + err);\n                    return;\n                }\n\n                if (!this.readOk(persistentMount)) {\n                    this.dos.warn(\"Indexed db contains broken FS, resetting...\");\n                    extractArchiveInCwd().then(resolve).catch(reject);\n                    return;\n                }\n\n                resolve();\n            });\n        });\n    }\n\n    // ### createFile\n    public createFile(file: string, body: ArrayBuffer | Uint8Array | string) {\n        // [synchronous] allow to create file in FS, you can pass absolute path.\n        // All directories will be created\n        //\n        // body can be string or ArrayBuffer or Uint8Array\n\n        if (body instanceof ArrayBuffer) {\n            body = new Uint8Array(body);\n        }\n\n        // windows style path are also valid, but **drive letter is ignored**\n        // if you pass only filename, then file will be writed in root \"/\" directory\n        file = file.replace(new RegExp(\"^[a-zA-z]+:\"), \"\") .replace(new RegExp(\"\\\\\\\\\", \"g\"), \"/\");\n        const parts = file.split(\"/\");\n\n        if (parts.length === 0) {\n            if (this.dos.onerror !== undefined) {\n                this.dos.onerror(\"Can't create file '\" + file + \"', because it's not valid file path\");\n            }\n            return;\n        }\n\n        const filename = parts[parts.length - 1].trim();\n\n        if (filename.length === 0) {\n            if (this.dos.onerror !== undefined) {\n                this.dos.onerror(\"Can't create file '\" + file + \"', because file name is empty\");\n            }\n            return;\n        }\n\n        /* i < parts.length - 1, because last part is file name */\n        const path = this.createPath(parts, 0, parts.length - 1);\n        this.fs.createDataFile(path, filename, body, true, true, true);\n    }\n\n    private createPath(parts: string[], begin: number, end: number) {\n        let path = \"\";\n        for (let i = begin; i < end; ++i) {\n            const part = parts[i].trim();\n            if (part.length === 0) {\n                continue;\n            }\n\n            this.fs.createPath(path, part, true, true);\n            path = path + \"/\" + part;\n        }\n\n        return path;\n    }\n\n    private syncFs() {\n        if (this.syncingPromise) {\n            return this.syncingPromise;\n        }\n\n        this.syncingPromise = new Promise<void>((resolve, reject) => {\n            const startedAt = Date.now();\n            this.fs.syncfs(false, (err: any) => {\n                if (err) {\n                    this.dos.error(\"Can't sync FS to indexed db, cause: \" + err);\n                    reject(err);\n                }\n                this.syncingPromise = null;\n                this.lastSyncTime = Date.now();\n                resolve();\n            });\n        });\n\n        return this.syncingPromise;\n    }\n\n    private normalizePath(path: string) {\n        if (path.length === 0 || path[0] !== \"/\") {\n            path = \"/\" + path;\n        }\n\n        if (path.length > 1 && path.endsWith(\"/\")) {\n            path = path.substr(0, path.length - 1);\n        }\n\n        return path;\n    }\n\n    private readOk(path: string) {\n        try {\n            const readed = this.fs.readFile(path + \"/state.fs\");\n            return readed[0] === 79 && readed[1] === 70;\n        } catch {\n            return false;\n        }\n    }\n\n    private writeOk(path: string) {\n        this.createFile(path + \"/state.fs\", new Uint8Array([79, 70])); // Ok\n    }\n\n}\n","// # DosHost\n// This class is used to detect and provide information about\n// features that supported in current environment\n\n/* tslint:disable:member-ordering */\nimport { Build } from \"./js-dos-build\";\nimport { ICache } from \"./js-dos-cache\";\nimport { DosModule } from \"./js-dos-module\";\nimport { Xhr } from \"./js-dos-xhr\";\n\nclass DosHost {\n\n    public wasmSupported = false;\n    public global = window as any;\n\n    private wdosboxPromise: Promise<any> | null = null;\n\n    constructor() {\n        this.global.exports = {};\n\n        // ### WebAssembly\n        // Host able to detect is WebAssembly supported or not,\n        // this information is stored in `Host.wasmSupported` variable\n        try {\n            if (typeof WebAssembly === \"object\" &&\n                typeof WebAssembly.instantiate === \"function\" &&\n                typeof WebAssembly.compile === \"function\") {\n\n                const wmodule = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));\n                if (wmodule instanceof WebAssembly.Module) {\n                    this.wasmSupported = new WebAssembly.Instance(wmodule) instanceof WebAssembly.Instance;\n                }\n            }\n        } catch (error) {\n            /* do nothing WebAssembly is not supported */\n        }\n\n        // ### polyfill\n        // Host also provides limited set of polyfills to support legacy browsers\n        this.polyfill();\n    }\n\n    // Currently polyfill contains implementations for:\n    // `Math.imul`, `Math.fround`, `Math.clz32`, `Math.trunc`\n    /* tslint:disable:no-bitwise */\n    /* tslint:disable:only-arrow-functions */\n    private polyfill() {\n        if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) {\n            Math.imul = function imul(a: any, b: any) {\n                const ah = a >>> 16;\n                const al = a & 0xffff;\n                const bh = b >>> 16;\n                const bl = b & 0xffff;\n                return (al * bl + ((ah * bl + al * bh) << 16)) | 0;\n            };\n        }\n        Math.imul = Math.imul;\n\n        if (!Math.fround) {\n            Math.fround = function(x) { return x; };\n        }\n        Math.fround = Math.fround;\n\n        if (!Math.clz32) {\n            Math.clz32 = function(x) {\n                x = x >>> 0;\n                for (let i = 0; i < 32; i++) {\n                    if (x & (1 << (31 - i))) { return i; }\n                }\n                return 32;\n            };\n        }\n        Math.clz32 = Math.clz32;\n\n        if (!Math.trunc) {\n            Math.trunc = function(x) {\n                return x < 0 ? Math.ceil(x) : Math.floor(x);\n            };\n        }\n        Math.trunc = Math.trunc;\n    }\n\n    // ### resolveDosBox\n    // `resolveDosBox` is another important task of DosHost\n    public resolveDosBox(url: string, cache: ICache, module: DosModule) {\n        // When dosbox is resolved, WDOSBOX module is set to\n        // global variable `exports.WDOSBOX`. This variable is\n        // used to prevent next loads of same dosbox module.\n        if (this.global.exports.WDOSBOX) {\n            module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            return;\n        }\n\n        if (!this.wasmSupported) {\n            if (module.onerror !== undefined) {\n                module.onerror(\"WebAssembly is not supported, can't resolve wdosbox\");\n            }\n            return;\n        }\n\n        if (this.wdosboxPromise === null) {\n            this.wdosboxPromise = this.compileDosBox(url, cache, module);\n        }\n\n        this.wdosboxPromise.then((instance: any) => {\n            /* leave promise scope */\n            const fn = () => {\n                this.wdosboxPromise = null;\n                module.ondosbox(this.global.exports.WDOSBOX, this.global.exports.instantiateWasm);\n            };\n            setTimeout(fn, 1);\n        }, (message: string) => {\n            /* leave promise scope */\n            const fn = () => {\n                this.wdosboxPromise = null;\n                if (module.onerror !== undefined) {\n                    module.onerror(message);\n                }\n            };\n            setTimeout(fn, 1);\n        });\n    }\n\n    // If dosbox is not yet resolved, then:\n    private compileDosBox(url: string, cache: ICache, module: DosModule) {\n        const buildTotal = Build.wasmSize + Build.jsSize;\n        return new Promise((resolve, reject) => {\n            const wasmUrl = url.replace(\".js\", \".wasm.js\");\n\n            // * Host downloads `wdosbox` asm + js scripts\n            new Xhr(wasmUrl, {\n                cache,\n                responseType: \"arraybuffer\",\n                progress: (total, loaded) => {\n                    if (module.onprogress) {\n                        module.onprogress(\"Resolving DosBox\", buildTotal, loaded);\n                    }\n                },\n                fail: (url: string, status: number, message: string) => {\n                    reject(\"Can't download wasm, code: \" + status +\n                        \", message: \" + message + \", url: \" + url);\n                },\n                success: (response: any) => {\n                    // * Compile dosbox wasm module\n                    const promise = WebAssembly.compile(response);\n                    const onreject = (reason: any) => {\n                        reject(reason + \"\");\n                    };\n                    promise.catch(onreject);\n                    promise.then((wasmModule) => {\n                        this.global.exports.instantiateWasm = (info: any, receiveInstance: any) => {\n                            info.env.globalscall = (...args: any[]) => {\n                                if (module.onglobals) {\n                                    module.onglobals.apply(null, args);\n                                }\n                            };\n                            // *  Instaniate it for each new dosbox runtime\n                            return WebAssembly.instantiate(wasmModule, info)\n                                .catch(onreject)\n                                .then((instance) => {\n                                    receiveInstance(instance, wasmModule);\n                                });\n                        };\n\n                        new Xhr(url, {\n                            cache,\n                            progress: (total, loaded) => {\n                                if (module.onprogress) {\n                                    module.onprogress(\"Resolving DosBox\", buildTotal, Build.wasmSize + loaded);\n                                }\n                            },\n                            fail: (url: string, status: number, message: string) => {\n                                reject(\"Can't download wdosbox.js, code: \" + status +\n                                    \", message: \" + message + \", url: \" + url);\n                            },\n                            success: (response: string) => {\n                                if (module.onprogress !== undefined) {\n                                    module.onprogress(\"Resolving DosBox\", buildTotal, buildTotal);\n                                }\n\n                                response +=\n                                /* tslint:disable:no-eval */\n                                eval.call(window, response);\n                                /* tslint:enable:no-eval */\n                                resolve(this.global.exports.WDOSBOX);\n                            },\n                        });\n                    });\n                },\n            });\n        });\n    }\n\n}\n\nexport const Host = new DosHost();\n","// # DosModule\n// DosModule is [emscripten module object](https://kripken.github.io/emscripten-site/docs/api_reference/module.html),\n// with additional functionality\nimport { DosRuntime } from \"./js-dos\";\nimport { Build } from \"./js-dos-build\";\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport getJsDosConfig from \"./js-dos-conf\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { DosBoxConfigDefaults, DosOptions, DosBoxConfig } from \"./js-dos-options\";\nimport { DosUi } from \"./js-dos-ui\";\n\nexport class DosModule extends DosOptions {\n    public isValid: boolean = false;\n    public canvas: HTMLCanvasElement;\n    public version = Build.version;\n    public onglobals?: (...args: any[]) => void;\n\n    private ci: Promise<DosCommandInterface> | null = null;\n    private instance: any;\n    private fs: DosFS | null = null;\n    private ui: DosUi | null = null;\n    private onready: (runtime: DosRuntime) => void;\n\n    private tickListeners: Array< () => void > = [];\n    private pauseListeners: Array< () => void > = [];\n    private resumeListeners: Array< () => void > = [];\n    private terminateListeners: Array< () => void > = [];\n\n    constructor(canvas: HTMLCanvasElement, onready: (runtime: DosRuntime) => void) {\n        super();\n        this.canvas = canvas;\n        this.onready = onready;\n\n        this.registerDefaultListeners();\n    }\n\n    private registerDefaultListeners() {\n        let hidden: string;\n        let visibilityChange: string;\n\n        if (typeof document.hidden !== \"undefined\") {\n            hidden = \"hidden\";\n            visibilityChange = \"visibilitychange\";\n        } else if (typeof (document as any).mozHidden !== \"undefined\") {\n            hidden = \"mozHidden\";\n            visibilityChange = \"mozvisibilitychange\";\n        } else if (typeof (document as any).msHidden !== \"undefined\") {\n            hidden = \"msHidden\";\n            visibilityChange = \"msvisibilitychange\";\n        } else if (typeof (document as any).webkitHidden !== \"undefined\") {\n            hidden = \"webkitHidden\";\n            visibilityChange = \"webkitvisibilitychange\";\n        }\n\n        document.addEventListener(\"visibilityChange\", () => {\n            (document as any)[hidden] ? this.pause() : this.resume();\n        }, false);\n\n        window.addEventListener(\"beforeunload\", () => {\n           this.terminate();\n        });\n    }\n\n    // ### logging\n    // DosModule implements simply logging features:\n    // `debug`, `info`, `warn`, `error` methods\n    public debug(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[DEBUG] \" + message);\n        }\n    }\n\n    public info(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[INFO] \" + message);\n        }\n    }\n\n    public warn(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[WARN] \" + message);\n        }\n    }\n\n    public error(message: string) {\n        if (this.log !== undefined) {\n            this.log(\"[ERROR] \" + message);\n        }\n    }\n\n    // ### ondosbox\n    public ondosbox(dosbox: any, instantiateWasm: any) {\n        this.info(\"DosBox resolved\");\n        (this as any).instantiateWasm = instantiateWasm;\n        this.instance = new dosbox(this);\n    }\n    // Method `ondosbox` is called when\n    // [Host](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-host) is resolved.\n    // This method instaniate wasm dosbox module with `this` as emscripten\n    // module object. It means that emscripten will call\n    // `this.onRuntimeInitialized` when runtime will be ready\n\n    public resolve() {\n        if (!this.wdosboxUrl) {\n            this.wdosboxUrl = \"wdosbox.js\";\n        }\n\n        if (!this.log) {\n            /* tslint:disable:no-console */\n            this.log = (message: string) => console.log(message);\n        }\n\n        if (!this.canvas) {\n            if (this.onerror !== undefined) {\n                this.onerror(\"canvas field is required, but not set!\");\n            }\n            return;\n        }\n\n        if (!this.onprogress) {\n            this.ui = new DosUi(this);\n            this.onprogress = (stage, total, loaded) => {\n                if (this.ui !== null) {\n                    this.ui.onprogress(stage, total, loaded);\n                }\n            };\n        }\n\n        // ### sdl defaults\n        // DosModule overrides defaults for emscripten SDL wrapper\n        // for maximum performance\n        (this as any).SDL = {\n            defaults: {\n                widht: 320,\n                height: 200,\n                copyOnLock: false,\n                discardOnLock: true,\n                opaqueFrontBuffer: false,\n            },\n        };\n\n        this.isValid = true;\n    }\n\n    // ### onRuntimeInitialized\n    public onRuntimeInitialized() {\n        const mainFn = (args?: string[]) => {\n            // When emscripten runtime is initialized and main\n            // function is called:\n            //\n            // * DosModule detach [auto ui](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ui)\n            if (this.ui !== null) {\n                this.ui.detach();\n                this.ui = null;\n            }\n\n            if (!args) {\n                args = [];\n            }\n\n            if (this.fs === null) {\n                return new Promise<DosCommandInterface>((resolve, reject) => {\n                    reject(\"IllegalState: fs is null\");\n                });\n            }\n\n            this.fs.chdir(\"/\");\n\n            // * Write default [dosbox.conf](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-conf)\n            // file to user directory\n            this.fs.createFile(\"/home/web_user/.dosbox/dosbox-jsdos.conf\", getJsDosConfig(this));\n            // * Mount emscripten FS as drive c:\n            args.unshift(\"-userconf\", \"-c\", \"mount c .\", \"-c\", \"c:\");\n            // * Run dosbox with passed arguments and resolve\n            // [DosCommandInterface](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ci)\n            (this as any).callMain(args);\n            return new Promise<DosCommandInterface>((resolve) => {\n                new DosCommandInterface(this, (ci: DosCommandInterface) => {\n                    resolve(ci);\n                });\n            });\n        };\n        this.fs = new DosFS(this);\n        this.onready({\n            fs: this.fs,\n            main: mainFn,\n        });\n    }\n\n    // ### registerTickListener\n    // registred tick listener it will be called each frame\n    public registerTickListener(listener: () => void) {\n        this.tickListeners.push(listener);\n    }\n\n    // ### registerPauseListener\n    // registred tick listener it will be called each frame\n    public registerPauseListener(listener: () => void) {\n        this.pauseListeners.push(listener);\n    }\n\n    // ### registerResumeListener\n    // registred tick listener it will be called each frame\n    public registerResumeListener(listener: () => void) {\n        this.resumeListeners.push(listener);\n    }\n\n    // ### registerTerminateListener\n    // registred tick listener it will be called each frame\n    public registerTerminateListener(listener: () => void) {\n        this.terminateListeners.push(listener);\n    }\n\n    // ### tick\n    // tick is called internally each frame, no need to call\n    // it manually\n    public tick() {\n        for (const l of this.tickListeners) {\n            l();\n        }\n    }\n\n    // ### pause\n    // pause is called when dosbox tab became inactive\n    public pause() {\n        for (const l of this.pauseListeners) {\n            l();\n        }\n    }\n\n    // ### tick\n    // resume is called when dosbox tab became active\n    public resume() {\n        for (const l of this.resumeListeners) {\n            l();\n        }\n    }\n\n    // ### tick\n    // terminate is called when dosbox tab is closed\n    public terminate() {\n        for (const l of this.terminateListeners) {\n            l();\n        }\n    }\n\n}\n","// # DosOptions\n// Is a options object that you pass to constructor of\n// [Dos](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos)\n// class, to configure emulation layer\n\nexport class DosBoxConfig {\n    public cycles?: string;\n//    cycles: Amount of instructions DOSBox tries to emulate each millisecond.\n//            Setting this value too high results in sound dropouts and lags.\n//            Cycles can be set in 3 ways:\n//              'auto'          tries to guess what a game needs.\n//                              It usually works, but can fail for certain games.\n//              'fixed #number' will set a fixed amount of cycles. This is what you usually need if 'auto' fails.\n//                              (Example: fixed 4000).\n//              'max'           will allocate as much cycles as your computer is able to handle.\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class DosOptions extends DosBoxConfig {\n\n    // ### onprogress\n    public onprogress?: (stage: string, total: number, loaded: number) => void;\n    // progress event listener, it is fired when loading progress is changed\n    // if this function is not set, then\n    // [auto ui](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ui) will be used\n    // to show progress\n    //\n    // * `stage` - current loading stage\n    // * `total` - total bytes to download on current stage\n    // * `loaded` - downloaded bytes\n\n    // ### onerror\n    public onerror?: (message: string) => void;\n    // this function is called when error happens\n    //\n    // * `message` - infomation about error\n\n    // ### log\n    public log?: (message: string) => void;\n    // you can provide log function, to override logging, by default js-dos uses console.log as implementation\n\n    // ### wdosboxUrl\n    public wdosboxUrl?: string;\n    // you can set alternative url for downloading js-dos script, default is 'wdosbox.js'\n\n}\n\nexport const DosBoxConfigDefaults: DosBoxConfig = {\n    cycles: \"auto\",\n};\n","// # JsDosUi\n// Optional ui module for js-dos.\n// This ui will be applied if client did not set `onprogress` in\n// [DosOptions](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options)\nimport * as DosDom from \"./js-dos-dom\";\nimport { DosModule } from \"./js-dos-module\";\n\nexport class DosUi {\n    private canvas: HTMLCanvasElement;\n    private dos: DosModule;\n\n    private overlay: HTMLDivElement | null = null;\n    private loaderMessage: HTMLDivElement | null = null;\n    private hidden: boolean = true;\n\n    constructor(dos: DosModule) {\n        this.dos = dos;\n        this.canvas = dos.canvas;\n\n        // ### How it works\n        // This ui replace canvas element with div .dosbox-container,\n        // that contains original canvas and .dosbox-overlay as children\n        // You can change style of ui by editing css for this two classes\n\n        try {\n            DosDom.applyCss(\"js-dos-ui-css\", this.css);\n\n            if (this.canvas.parentElement !== null && this.canvas.parentElement.className !== \"dosbox-container\") {\n                const container = DosDom.createDiv(\"dosbox-container\");\n\n                const parent = this.canvas.parentElement;\n                parent.replaceChild(container, this.canvas);\n                container.appendChild(this.canvas);\n\n                const overlay = DosDom.createDiv(\"dosbox-overlay\");\n                container.appendChild(overlay);\n\n                overlay.innerHTML = this.overlayHtml;\n            }\n\n            const container = this.canvas.parentElement;\n            if (container === null) {\n                throw new Error(\"Illegal state, container is null\");\n            }\n            this.overlay = this.childById(container, \"dosbox-overlay\");\n            if (this.overlay === null) {\n                throw new Error(\"Illegal state, overlay is null\");\n            }\n            this.loaderMessage = this.childById(this.overlay, \"dosbox-loader-message\");\n\n            this.hidden = true;\n            this.show();\n        } catch (e) {\n            this.onprogress = this.onprogressFallback;\n        }\n    }\n\n    public onprogress(stage: string, total: number, loaded: number) {\n        const message = stage + \" \" + Math.round(loaded * 100 / total * 10) / 10 + \"%\";\n        if (this.loaderMessage !== null) {\n            this.loaderMessage.innerHTML = message;\n        }\n        this.dos.info(message);\n\n        if (loaded >= total) {\n            this.hide();\n        } else {\n            this.show();\n        }\n    }\n\n    public detach() {\n        this.hide();\n        this.onprogress = this.onprogressFallback;\n    }\n\n    public hide() {\n        if (this.hidden) {\n            return;\n        }\n        this.hidden = true;\n        if (this.overlay !== null) {\n            this.overlay.setAttribute(\"style\", \"display: none\");\n        }\n    }\n\n    public show() {\n        if (!this.hidden) {\n            return;\n        }\n        this.hidden = false;\n        if (this.overlay !== null) {\n            this.overlay.setAttribute(\"style\", \"display: block\");\n        }\n    }\n\n    private onprogressFallback(stage: string, total: number, loaded: number) {\n        this.dos.info(stage + \" \" + loaded * 100 / total + \"%\");\n    }\n\n    private childById(parent: Element, className: string): HTMLDivElement | null {\n        if (parent === null) {\n            return null;\n        }\n\n        for (let i = 0; i < parent.childElementCount; ++i) {\n            let child: HTMLElement | null = parent.children[i] as HTMLElement;\n            if (child.className === className) {\n                return child as HTMLDivElement;\n            }\n\n            child = this.childById(child, className);\n            if (child !== null) {\n                return child as HTMLDivElement;\n            }\n        }\n\n        return null;\n    }\n\n    // ### Style\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private css: string = `\n    .dosbox-container { position: relative; min-width: 320px; min-height: 200px; display: inline-block; }\n    .dosbox-overlay, .dosbox-loader { position: absolute; left: 0; right: 0; top: 0; bottom: 0; background-color: rgba(51, 51, 51, 0.7); }\n    .dosbox-start { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; color: #fff; font-size: 1.5em; text-decoration: underline; cursor: pointer; }\n    .dosbox-overlay a { color: #fff; }\n    .dosbox-powered { position: absolute; right: 1em; bottom: 1em; font-size: 0.8em; color: #9C9C9C; }\n    .dosbox-loader-message { text-align: center; position: absolute; left: 0; right: 0; bottom: 50%; margin: 0 0 -3em 0; box-sizing: border-box; color: #fff; font-size: 1.5em; }\n    @-moz-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @-webkit-keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } @keyframes loading { 0% { left: 0; } 50% { left: 8.33333em; } 100% { left: 0; } } .st-loader { width: 10em; height: 2.5em; position: absolute; top: 50%; left: 50%; margin: -1.25em 0 0 -5em; box-sizing: border-box; }\n    .st-loader:before, .st-loader:after { content: \"\"; display: block; position: absolute; top: 0; bottom: 0; width: 1.25em; box-sizing: border-box; border: 0.25em solid #fff; }\n    .st-loader:before { left: -0.76923em; border-right: 0; }\n    .st-loader:after { right: -0.76923em; border-left: 0; }\n    .st-loader .equal { display: block; position: absolute; top: 50%; margin-top: -0.5em; left: 4.16667em; height: 1em; width: 1.66667em; border: 0.25em solid #fff; box-sizing: border-box; border-width: 0.25em 0; -moz-animation: loading 1.5s infinite ease-in-out; -webkit-animation: loading 1.5s infinite ease-in-out; animation: loading 1.5s infinite ease-in-out; background: #fff; }\n    `;\n\n    // ### Template\n    /* tslint:disable:member-ordering */\n    /* tslint:disable:max-line-length */\n    private overlayHtml: string = `\n        <div class=\"dosbox-loader\">\n            <div class=\"st-loader\">\n                <span class=\"equal\"></span>\n            </div>\n            <div class=\"dosbox-loader-message\"></div>\n        </div>\n        <div class=\"dosbox-powered\">\n            Powered by &nbsp;<a href=\"https://js-dos.com\">js-dos.com</a> (6.22)\n        </div>\n    `;\n}\n","import { ICache } from \"./js-dos-cache\";\nimport CacheNoop from \"./js-dos-cache-noop\";\n\n// # Xhr\n// `Xhr` is small wrapper over XMLHttpRequest, that provides some\n// handy methods\n\n// You can configre Xhr with XhrOptions object:\ninterface XhrOptions {\n    cache: ICache;\n    method?: string;\n    success?: (response: any) => void;\n    progress?: (total: number, loaded: number) => void;\n    fail?: (url: string, status: number, message: string) => void;\n    data?: string;\n    responseType?: XMLHttpRequestResponseType;\n}\n// * `method` - \"GET\" | \"POST\"\n// * `success` - callback when resource is downloaded\n// * `progress` - callback for progress\n// * `fail` - fail callback\n// * `data` - data for POST request, should typeof `application/x-www-form-urlencoded`\n// * `responseType` - XMLHttpRequestResponseType\n\n// Class Xhr does not have any public methods\nexport class Xhr {\n    private cache: ICache;\n    private resource: string;\n    private options: XhrOptions;\n    private xhr: XMLHttpRequest | null = null;\n    private total: number = 0;\n    private loaded: number = 0;\n\n    constructor(url: string, options: XhrOptions) {\n        this.resource = url;\n        this.options = options;\n        this.options.method = options.method || \"GET\";\n        this.cache = options.cache || new CacheNoop();\n\n        if (this.options.method  === \"GET\") {\n            this.cache.get(this.resource, (data) => {\n                if (this.options.success !== undefined) {\n                    this.options.success(data);\n                }\n            }, () => {\n                this.makeHttpRequest();\n            });\n        }\n    }\n\n    private makeHttpRequest() {\n        this.xhr = new XMLHttpRequest();\n        this.xhr.open(this.options.method || \"GET\", this.resource, true);\n        if (this.options.method === \"POST\") {\n            this.xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        this.xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n\n        let progressListner;\n        if (typeof (progressListner = this.xhr).addEventListener === \"function\") {\n            progressListner.addEventListener(\"progress\", (evt) => {\n                this.total = evt.total;\n                this.loaded = evt.loaded;\n                if (this.options.progress) {\n                    return this.options.progress(evt.total, evt.loaded);\n                }\n            });\n        }\n\n        let errorListener;\n        if (typeof (errorListener = this.xhr).addEventListener === \"function\") {\n            errorListener.addEventListener(\"error\", (evt) => {\n                if (this.options.fail) {\n                    this.options.fail(this.resource, (this.xhr as XMLHttpRequest).status, \"connection problem\");\n                    return delete this.options.fail;\n                }\n            });\n        }\n        this.xhr.onreadystatechange = () => {\n            return this.onReadyStateChange();\n        };\n        if (this.options.responseType) {\n            this.xhr.responseType = this.options.responseType;\n        }\n        this.xhr.send(this.options.data);\n    }\n\n    private onReadyStateChange() {\n        const xhr = (this.xhr as XMLHttpRequest);\n        if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n                if (this.options.success) {\n                    const total = Math.max(this.total, this.loaded);\n                    if (this.options.progress !== undefined) {\n                        this.options.progress(total, total);\n                    }\n\n                    if (this.options.method === \"GET\" && this.resource.indexOf(\"?\") < 0) {\n                        this.cache.put(this.resource, xhr.response, () => { /**/ });\n                    }\n\n                    return this.options.success(xhr.response);\n                }\n            } else if (this.options.fail) {\n                this.options.fail(this.resource, xhr.status, \"connection problem\");\n                return delete this.options.fail;\n            }\n        }\n    }\n\n}\n","\n// # Example\n// ```javascript\n// Dos(canvas).ready((fs, main) => {\n//     fs.extract(\"digger.zip\").then(() => {\n//         main([\"-c\", \"DIGGER.COM\"])\n//     });\n// });\n// ```\n// Dos function is entry point that provides emulation layer.\n// As emulation layer js-dos uses [DosBox ported to emscripten](https://github.com/dreamlayers/em-dosbox/#compiling).\n\n// # Dos\n\nimport openCache from \"./js-dos-cache\";\nimport { DosCommandInterface } from \"./js-dos-ci\";\nimport { DosFS } from \"./js-dos-fs\";\nimport { Host } from \"./js-dos-host\";\nimport { DosModule } from \"./js-dos-module\";\nimport { DosOptions } from \"./js-dos-options\";\n\n// When you call `Dos(canvas, options)` js-dos behind the scene will download\n// dosbox and prepare it to start. This function will return `Promise<DosReadyPromise>`\n// that will be resolved when dosbox is ready. In case of error promise\n// will be rejected.\n//\n// * `canvas`: HTMLCanvasElement - this canvas element is used as window for dosbox\n// * `options`: [DosOptions](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-options) -\n// optional configuration object\nexport type DosFactory = (canvas: HTMLCanvasElement, options?: DosOptions) => DosReadyPromise;\nconst Dos: DosFactory = (canvas: HTMLCanvasElement, options?: DosOptions) => {\n    const promise = new Promise<DosRuntime>((resolve, reject) => {\n        const module = new DosModule(canvas, resolve);\n\n        if (!options) {\n            options = {};\n        }\n\n        if (!options.onerror) {\n            options.onerror = (message: string) => {\n                /* tslint:disable:no-console */\n                console.error(message);\n                /* tslint:enable:no-console */\n            };\n        }\n\n        Object.assign(module, options);\n\n        // ### Error handling\n        // Error handling should support both ways:\n        //\n        // * Through rejecting of promise\n        // * Fire onerror function of DosOptions object\n\n        const onerror = module.onerror;\n        module.onerror = (message: string) => {\n            reject(message);\n\n            const fn = () => {\n                if (onerror) {\n                    onerror(message);\n                    module.onerror = onerror;\n                } else {\n                    module.onerror = module.error;\n                }\n            };\n\n            setTimeout(fn, 1);\n        };\n\n        module.resolve();\n        if (!module.isValid) {\n            return;\n        }\n\n        openCache(module, (cache) => {\n            // See [Host](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-host)\n            // to understand resolving of emulation layer (dosbox).\n            Host.resolveDosBox(module.wdosboxUrl as string, cache, module);\n        });\n\n    });\n\n// ### DosReadyPromise\n// Is a Promise object with additional method ready.\n// Method `ready` is just a wrapper over `then` method that\n// split resolved object into meaningful parts.\n\n    const dosReadyPromise = (promise as unknown) as DosReadyPromise;\n    dosReadyPromise.ready = (onready) => {\n        dosReadyPromise.then((runtime: DosRuntime) => {\n            onready(runtime.fs, runtime.main);\n        });\n        return dosReadyPromise;\n    };\n    return dosReadyPromise;\n};\n\nexport default Dos;\n\nexport type DosMainFn = (args?: string[]) => Promise<DosCommandInterface>;\n\n// Plain promise will be resolved with `DosRuntime` interface, that\n// includes:\n//\n// * `fs`: [DosFS](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-fs) -\n// API for working with dosbox filesystem\n// * `main`: DosMainFn - a function that you should call to actuall start\n// dosbox. It's like a main function in C++, or shell command line. This function\n// will return Promise of [DosCommandInterface](https://js-dos.com/6.22/docs/api/generate.html?page=js-dos-ci).\n// You can use it to control runned dosbox.\nexport interface DosRuntime {\n    fs: DosFS;\n    main: DosMainFn;\n}\n\nexport interface DosReadyPromise extends Promise<DosRuntime> {\n    // `onready` - callback that receive DosRuntime splitted by fields\n    ready: (onready: (fs: DosFS, main: DosMainFn) => void) => Promise<DosRuntime>;\n}\n\n(window as any).Dos = Dos;\n"]}